---
import Pokedex from "pokedex-promise-v2";
import Layout from "../../layouts/Layout.astro";
import { getTypeColorByPokemonTypeName } from "../../utils/pokemon-types";
import Container from "../../components/container.astro";
import BadgePokemonType from "../../components/ui/badge-pokemon-type.astro";

import { FaArrowLeft } from "react-icons/fa6";
import PokemonStat from "../../components/pokemon-stat.astro";
import ProgressBar from "../../components/ui/progress-bar.astro";
import Evolutions from "../../components/evolutions.astro";
import { fade } from "astro:transitions";

const p = new Pokedex();

export async function getStaticPaths() {
  const pokedex = new Pokedex();
  const allPokemons = await pokedex.getPokemonsList({
    limit: -1,
  });

  return allPokemons.results.map((pokemon) => ({
    params: {
      pokemon: pokemon.name,
    },
  }));
}

const { pokemon: pokemonId } = Astro.params;

const {
  types,
  order,
  sprites,
  weight,
  height,
  abilities,
  base_experience,
  stats,
} = await p.getPokemonByName(pokemonId);

const [typePokemon, secondTypePokemon] = types;

const pokemonColor = getTypeColorByPokemonTypeName(typePokemon.type.name);
const pokemonColorSecondType = getTypeColorByPokemonTypeName(
  secondTypePokemon?.type.name,
);

const pokemonSpecies = await p.getPokemonSpeciesByName(pokemonId);

const pokemonDescription = pokemonSpecies.flavor_text_entries.find(
  (entry) => entry.language.name === "en",
)?.flavor_text;

const pokemonType = pokemonSpecies.genera.find(
  (entry) => entry.language.name === "en",
)?.genus;
---

<Layout title={pokemonId[0].toUpperCase() + pokemonId.slice(1)}>
  <div
    class="absolute bottom-auto right-52 top-36 h-[450px] w-[350px] rounded-full opacity-40 blur-[80px]"
    style={{
      backgroundColor: pokemonColorSecondType,
    }}
  >
  </div>
  <div
    class="fixed inset-0 -z-10 h-full w-full bg-white bg-[linear-gradient(to_right,#f0f0f0_1px,transparent_1px),linear-gradient(to_bottom,#f0f0f0_1px,transparent_1px)] bg-[size:6rem_4rem]"
  >
  </div>
  <div
    class="w-full h-96 flex justify-center pt-4"
    style={{
      background: `linear-gradient(to bottom, ${pokemonColor} 0.5%, #fff)`,
    }}
  >
    <Container>
      <div
        transition:name={`pokemon ${pokemonId} box`}
        transition:animate="none"
        class="relative flex flex-col gap-8"
      >
        <a
          href="/"
          class="flex items-center gap-2 p-1 text-white border-2 w-fit rounded-lg hover:bg-primary hover:text-black transition-colors"
        >
          <FaArrowLeft client:load />
           Back
        </a>
        <img
          class="self-center"
          transition:name={`${pokemonId} image`}
          src={sprites.other.dream_world.front_default!}
          width={300}
          height={100}
          alt={pokemonId}
        />

        <div
          transition:name={`${pokemonId} header`}
          class="flex justify-between items-center flex-wrap gap-2"
        >
          <div class="flex flex-col">
            <span
              transition:name={`${pokemonId} ${order} order`}
              class="text-2xl italic text-gray-400 leading-none"
              >#{order.toString().padStart(3, "0")}</span
            >
            <h1
              style={{ color: pokemonColor }}
              transition:name={`${pokemonId} title`}
              class="text-5xl font-extrabold first-letter:uppercase"
            >
              {pokemonId}
            </h1>
          </div>
          <ul class="flex items-center gap-2">
            {
              types.map(({ type }) => (
                <li>
                  <BadgePokemonType type={type.name} />
                </li>
              ))
            }
          </ul>
        </div>
        <p
          transition:name={`${pokemonId} description`}
          transition:animate={fade({ duration: 500 })}
        >
          {pokemonDescription?.replace("", " ")}
        </p>

        <div
          transition:name={`${pokemonId} about`}
          transition:animate={fade({ duration: 500 })}
          class="flex flex-col justify-between md:flex-row gap-6 md:gap-0"
        >
          <div class="flex-1 flex flex-col gap-6">
            <section class="flex flex-col gap-2">
              <h2 class="text-3xl text-gray-800 font-bold">About</h2>

              <div class="flex flex-col gap-2">
                <PokemonStat label="Species:" value={pokemonType} />

                <PokemonStat
                  label="Height:"
                  value={`${(height / 10).toFixed(1)} m`}
                />

                <PokemonStat
                  label="Weight:"
                  value={`${(weight / 10).toFixed(1)} kg`}
                />

                <div class="flex items-center gap-2">
                  <PokemonStat
                    label="Abilities:"
                    value={abilities
                      .map(({ ability }) => ability.name)
                      .join(", ")}
                  />
                </div>
              </div>
            </section>

            <section class="flex flex-col gap-2">
              <h2 class="text-3xl text-gray-800 font-bold">Training</h2>

              <PokemonStat
                label="Base Exp:"
                value={base_experience as number}
              />

              <PokemonStat
                label="Base Happiness:"
                value={pokemonSpecies.base_happiness ?? ""}
              />

              <PokemonStat
                label="Capture Rate:"
                value={`${pokemonSpecies.capture_rate}%`}
              />

              <PokemonStat
                label="Growth Rate:"
                value={pokemonSpecies.growth_rate?.name}
              />
            </section>
          </div>
          <section class="flex-1 flex flex-col gap-2">
            <h2 class="text-3xl text-gray-800 font-bold">Stats</h2>

            <div
              class="w-full flex justify-betwwen bg-white border-2 border-gray-50 py-4 rounded-lg"
            >
              {
                stats.map(({ base_stat, stat: { name } }) => (
                  <ProgressBar
                    backgroundColor={pokemonColor}
                    max={255}
                    percentage={base_stat}
                    label={name.replace("-", " ")}
                  />
                ))
              }
            </div>
          </section>
        </div>
      </div>

      <section
        transition:name={`${pokemonId} evolutions`}
        transition:animate={fade({ duration: 500 })}
        aria-label="Evolutions"
        class="flex flex-col gap-2 w-full"
      >
        <Evolutions chainUrl={pokemonSpecies.evolution_chain?.url} />
      </section>
    </Container>
  </div>
</Layout>
